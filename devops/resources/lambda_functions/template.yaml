Transform: AWS::Serverless-2016-10-31

Parameters:
  AppName:
    Type: String
    Description: The Name of the application for our infrastructor
        
  Environment:
    Type: String

  CdnBucket:
    Type: String
    Description: The bucket location for cdn distribtion

    
Resources:
  CommonLibraryLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: common-library
      Description: common library files
      ContentUri: ../../../src/common  # directory
      CompatibleRuntimes:
        - python3.11
    Metadata:
      BuildMethod: makefile

  RssFeedBuilderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - ${AppName}-${Environment}-${ResourceName}
        - ResourceName: Rss Feed Builder
      CodeUri: ../../../src/lambda_handlers/rss_feed
      Handler: app.lambda_handler
      Runtime: python3.11
      MemorySize: 512
      Timeout: 300
      Tracing: Active
      Role: !GetAtt LambdaRole.Arn
      Layers:
        - !Ref CommonLibraryLayer
      Environment:
        Variables:
          FEED_S3_BUCKET_NAME: !Ref CdnBucket
          
  RssFeedBuilderFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${RssFeedBuilderFunction}


  LambdaRole:
    Type: AWS::IAM::Role    
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole                
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Path: /
      Policies:
        - PolicyName: RssFeedBuilderPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:              
              - Sid: "LambdaDefaultPermissions"
                Effect: Allow
                Action: 
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - "arn:aws:logs:*:*:*"
              - Sid: "S3Permissions"
                Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:PutObjectTagging"
                  - "s3:ListBucketMultipartUploads"
                  - "s3:AbortMultipartUpload"
                  - "s3:ListMultipartUploadParts"
                  - "s3:GetBucketLocation"
                
                Resource:
                  - !Sub "arn:aws:s3:::${CdnBucket}"
                  - !Sub "arn:aws:s3:::${CdnBucket}/*"


  Scheduler:
    Type: AWS::Serverless::Application
    Properties:
      Location: ../automation/event_bridge/template.yaml
      Parameters:
        AppName: !Ref AppName        
        Environment: !Ref Environment
        LambdaFunctionToExecuteName: !Ref RssFeedBuilderFunction
        LambdaFunctionToExecuteArn: !GetAtt RssFeedBuilderFunction.Arn


  # SNS Topics
  SNSTopic:
    Type: AWS::Serverless::Application
    Properties:
      Location: ../monitoring/notifications/template.yaml
      Parameters:
        AppName: !Ref AppName        
        Environment: !Ref Environment
        TopicName: !Sub "Failure-${RssFeedBuilderFunction}"

  # Alarm
  CloudWatchAlarm:
    Type: AWS::Serverless::Application
    Properties:
      Location: ../monitoring/lambda_failure_alarm/template.yaml
      Parameters:        
        LambdaFunctionName: !Ref RssFeedBuilderFunction
        SNSTopic: !GetAtt SNSTopic.Outputs.SNSTopArn
  # Subscription

